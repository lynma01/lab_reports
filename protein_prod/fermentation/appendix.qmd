---
title: appendix
---

# Appendix {.appendix}

## Shake Flask Visualizations

```{python}

#| lst-label: lst-sf-od-comp
#| lst-caption: Visualization code used to generate @fig-sf-od-comp

import polars as pd
import polars.selectors as cs
import altair as alt

ppi=200

df = pd.read_excel('data/shakeflask.xlsx')
width, height = 450, 250

# Turbidity line chart
chart_od = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('OD600 Reading:Q', title='Turbidity (OD600)')
    , color=('Growth Condition')
    , tooltip=['OD600 Reading']
).properties(
      title='Turbidity (OD600) Over Time'
    , width=width
    , height=height)

chart_od.save("images/chart_sf_od.png", ppi=ppi)
```

---

```{python}

#| lst-label: lst-sf-ph-comp
#| lst-cap: Visualization code for generating @fig-sf-ph-comp

chart_ph = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('pH:Q', title='pH').scale(zero=False)
    , color=('Growth Condition')
    , tooltip=['pH']
).properties(
      title='pH Over Time'
    , width=width
    , height=height)

chart_ph.save("images/chart_sf_ph.png", ppi=ppi)
```

---

```{python}

#| lst-label: lst-c-sf-carbon-comp
#| lst-caption: Visualization code used to generate @fig-sf-carbon-comp

df = pd.read_excel('data/shakeflask.xlsx')

# Turbidity line chart
chart_carbon = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('Glucose:Q', title='Glucose (ng/dL)')
    , color=('Growth Condition')
    , tooltip=['Glucose']
).properties(
      title='Glucose (ng/dL) Over Time'
    , width=width
    , height=height)

chart_carbon.save("images/chart_sf_gl.png", ppi=ppi)

```

---

```{python}

#| lst-label: lst-c-bt-pH
#| lst-caption: Visualization code used to generate @fig-bt-ph

df = pd.read_excel('data/benchtop.xlsx')
df = df.select(["Time", "pH (Benchtop)", "pH (Meter)"])
df = df.unpivot(cs.numeric(), index="Time")

# Turbidity line chart
chart_bt_ph = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('value:Q', title='pH Reading')
    , color="variable"
).properties(
      title='Comparison of pH Values by Source over Time'
    , width=width
    , height=height)

chart_bt_ph.save("images/chart_bt_ph.png", ppi=ppi)

```

## Bioreactor Visualizations

```{python}

#| lst-label: lst-c-bt-od600
#| lst-caption: Visualization code used to generate @fig-bt-od600

df = pd.read_excel('data/benchtop.xlsx')

# Turbidity line chart
chart_bt_od600 = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('OD600:Q', title='Turbidity (OD600)')
    , tooltip=['OD600']
).properties(
      title='Turbidity (OD600) Values Over Time'
    , width=width
    , height=height)

chart_bt_od600.save("images/chart_bt_od.png", ppi=ppi)

```

---

```{python}

#| lst-label: lst-c-bt-carbon
#| lst-caption: Visualization code used to generate @fig-bt-carbon

df = pd.read_excel('data/benchtop.xlsx')

# Turbidity line chart
chart_bt_carbon = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('Carbon Source Reading:Q', title='Glucose ng/dL')
    , tooltip=['Carbon Source Reading']
).properties(
      title='Glucose Concentration Values Over Time'
    , width=width
    , height=height)

chart_bt_carbon.save("images/chart_bt_carbon.png", ppi=ppi)
chart_bt_carbon.display()

```

---

```{python}

#| lst-label: lst-c-bt-rpm-do
#| lst-caption: Visualization code used to generate @fig-bt-do

df = pd.read_excel('data/benchtop.xlsx')
width, height = 200, 200

# RPM line chart
chart_bt_rpm = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('RPM:Q', title='Bioreactor RPM')
).properties(
      title='Bioreactor RPM Over Time'
    , width=width
    , height=height)

chart_bt_do = alt.Chart(df).mark_line(point=True).encode(
      x=alt.X('Time', title='Time')
    , y=alt.Y('Dissolved Oxygen', title='Dissolved Oxygen (DO) %')
).properties(
      title='Bioreactor DO Over Time'
    , width=width
    , height=height)

final_chart = alt.hconcat(chart_bt_rpm, chart_bt_do)
final_chart.save("images/chart_bt_do.png", ppi=ppi)

```
